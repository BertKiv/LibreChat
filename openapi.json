{
  "openapi": "3.0.0",
  "info": {
    "version": "1.3.0",
    "title": "Vultr Inference API",
    "contact": {
      "email": "support@vultr.com",
      "name": "",
      "url": "https://www.vultr.com"
    },
    "x-logo": {
      "url": "https://api.vultrinference.com/vultr-serverless-inference.png",
      "backgroundColor": "#fafafa",
      "altText": "Vultr Cloud Inference"
    }
  },
  "servers": [
    {
      "url": "https://api.vultrinference.com/v1"
    }
  ],
  "paths": {
    "/chat/completions": {
      "post": {
        "summary": "Create Chat Completion",
        "tags": [
          "Chat"
        ],
        "description": "Create Chat Completion on a specified text generation model.",
        "operationId": "create-chat-completion",
        "security": [
          {
            "API Key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chat-completion-request-payload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/chat-completion-response-payload"
                    },
                    {
                      "$ref": "#/components/schemas/chat-completion-streaming-response-payload"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      }
    },
    "/chat/completions/RAG": {
      "post": {
        "summary": "RAG Chat Completion",
        "tags": [
          "Chat"
        ],
        "description": "Create Chat Completion on a specified text generation model with retrieval-augmented generation, utilizing the context of relevant search results from items or files in a vectore store collection.",
        "operationId": "rag-chat-completion",
        "security": [
          {
            "API Key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/chat-rag-request-payload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/chat-completion-response-payload"
                    },
                    {
                      "$ref": "#/components/schemas/chat-completion-streaming-response-payload"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      }
    },
    "/audio/speech": {
      "post": {
        "summary": "Create Speech",
        "tags": [
          "Audio"
        ],
        "description": "Generates speech audio from input text.",
        "operationId": "create-speech",
        "security": [
          {
            "API Key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/text-to-speech-request-payload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "audio/wav": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      }
    },
    "/audio/voices": {
      "get": {
        "summary": "List Audio Voices",
        "tags": [
          "Audio"
        ],
        "description": "Get a list of voices for speech generation.",
        "operationId": "list-audio-voices",
        "security": [
          {
            "API Key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/audio-voices-response-payload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      }
    },
    "/vector_store": {
      "get": {
        "summary": "List Collections",
        "tags": [
          "Vector Store"
        ],
        "description": "Retrieve a list of vector store collections.",
        "operationId": "list-vector-stores",
        "security": [
          {
            "API Key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list-vector-stores-response-payload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      },
      "post": {
        "summary": "Create Collection",
        "tags": [
          "Vector Store"
        ],
        "description": "Creates a vector store collection for searchable embeddings.",
        "operationId": "create-vector-store",
        "security": [
          {
            "API Key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create-vector-store-request-payload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get-vector-store-response-payload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      }
    },
    "/vector_store/{id}": {
      "get": {
        "summary": "Get Collection",
        "tags": [
          "Vector Store"
        ],
        "description": "Retrieve a vector store collection by the ID.",
        "operationId": "get-vector-store",
        "security": [
          {
            "API Key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/vector-store-id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get-vector-store-response-payload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      },
      "patch": {
        "summary": "Update Collection",
        "tags": [
          "Vector Store"
        ],
        "description": "Updates a vector store collection record.",
        "operationId": "update-vector-store",
        "security": [
          {
            "API Key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/vector-store-id",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update-vector-store-request-payload"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get-vector-store-response-payload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      },
      "delete": {
        "summary": "Delete Collection",
        "tags": [
          "Vector Store"
        ],
        "description": "Deletes a vector store collection record. This will also remove all items in the collection.",
        "operationId": "delete-vector-store",
        "security": [
          {
            "API Key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/vector-store-id",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      }
    },
    "/vector_store/{id}/search": {
      "post": {
        "summary": "Search Collection",
        "tags": [
          "Vector Store"
        ],
        "description": "Searches items in a vector store collection for the closest embeddings matches.",
        "operationId": "search-vector-store",
        "security": [
          {
            "API Key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/search-vector-store-request-payload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/search-vector-store-response-payload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      }
    },
    "/vector_store/{id}/items": {
      "get": {
        "summary": "List Collection Items",
        "tags": [
          "Vector Store"
        ],
        "description": "Retrieve a list of items within a vector store collections.",
        "operationId": "list-vector-store-items",
        "security": [
          {
            "API Key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/vector-store-id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list-vector-store-items-response-payload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      },
      "post": {
        "summary": "Add Collection Item",
        "tags": [
          "Vector Store"
        ],
        "description": "Adds an item to a vector store collection.",
        "operationId": "add-vector-store-item",
        "security": [
          {
            "API Key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/vector-store-id",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add-vector-store-item-request-payload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/add-vector-store-item-response-payload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      }
    },
    "/vector_store/{id}/items/{itemid}": {
      "get": {
        "summary": "Get Collection Item",
        "tags": [
          "Vector Store"
        ],
        "description": "Retrieve a vector store collection item by the ID.",
        "operationId": "get-vector-store-item",
        "security": [
          {
            "API Key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/vector-store-id",
            "required": true
          },
          {
            "$ref": "#/components/parameters/vector-store-item-id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get-vector-store-item-response-payload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      },
      "patch": {
        "summary": "Update Collection Item",
        "tags": [
          "Vector Store"
        ],
        "description": "Updates a vector store collection item record.",
        "operationId": "update-vector-store-item",
        "security": [
          {
            "API Key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/vector-store-id",
            "required": true
          },
          {
            "$ref": "#/components/parameters/vector-store-item-id",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update-vector-store-item-request-payload"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get-vector-store-item-response-payload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      },
      "delete": {
        "summary": "Delete Collection Item",
        "tags": [
          "Vector Store"
        ],
        "description": "Deletes a vector store collection item record.",
        "operationId": "delete-vector-store-item",
        "security": [
          {
            "API Key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/vector-store-id",
            "required": true
          },
          {
            "$ref": "#/components/parameters/vector-store-item-id",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      }
    },
    "/vector_store/{id}/files": {
      "get": {
        "summary": "List Collection Files",
        "tags": [
          "Vector Store"
        ],
        "description": "Retrieve a list of files within a vector store collections.",
        "operationId": "list-vector-store-files",
        "security": [
          {
            "API Key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/vector-store-id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list-vector-store-files-response-payload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      },
      "post": {
        "summary": "Add Collection File",
        "tags": [
          "Vector Store"
        ],
        "description": "Adds a file to a vector store collection.",
        "operationId": "add-vector-store-file",
        "security": [
          {
            "API Key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/vector-store-id",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file object to be uploaded to the vector store collection."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/add-vector-store-file-response-payload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      }
    },
    "/vector_store/{id}/files/{fileid}": {
      "get": {
        "summary": "Get Collection File",
        "tags": [
          "Vector Store"
        ],
        "description": "Retrieve a vector store collection file by the ID.",
        "operationId": "get-vector-store-file",
        "security": [
          {
            "API Key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/vector-store-id",
            "required": true
          },
          {
            "$ref": "#/components/parameters/vector-store-file-id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get-vector-store-file-response-payload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      },
      "delete": {
        "summary": "Delete Collection File",
        "tags": [
          "Vector Store"
        ],
        "description": "Deletes a vector store collection file record.",
        "operationId": "delete-vector-store-file",
        "security": [
          {
            "API Key": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/vector-store-id",
            "required": true
          },
          {
            "$ref": "#/components/parameters/vector-store-file-id",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      }
    },
    "/models": {
      "get": {
        "summary": "List Models",
        "tags": [
          "Models"
        ],
        "description": "Retrieve a list of inference models.",
        "operationId": "list-models",
        "security": [
          {
            "API Key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models-response-payload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      }
    },
    "/audio/models": {
      "get": {
        "summary": "List Audio Models",
        "tags": [
          "Models"
        ],
        "description": "Retrieve a list of models for speech and audio inference.",
        "operationId": "list-audio-models",
        "security": [
          {
            "API Key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/audio-models-response-payload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      }
    },
    "/usage": {
      "get": {
        "summary": "Get Usage",
        "tags": [
          "Usage"
        ],
        "description": "View usage information for the current and previous months.",
        "operationId": "get-usage",
        "security": [
          {
            "API Key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usage-response-payload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      }
    },
    "/requests": {
      "post": {
        "summary": "Query Requests",
        "tags": [
          "Request Logs"
        ],
        "description": "Look up requests sent to the Vultr Inference API along with their response details.",
        "operationId": "query-requests",
        "security": [
          {
            "API Key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/query-requests-payload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/query-requests-response-payload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error"
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Get Cluster Status",
        "tags": [
          "Health Check"
        ],
        "description": "View the current status of the inference cluster.",
        "operationId": "get-cluster-status",
        "security": [
          {
            "API Key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cluster-status-response-payload"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cluster-status-response-error-payload"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "chat-completion-request-payload": {
        "title": "Chat Completion Request Payload",
        "type": "object",
        "x-tags": [
          "inference",
          "text generation",
          "chat completion",
          "request"
        ],
        "description": "Chat Completion Request Payload",
        "x-examples": {},
        "required": [
          "model",
          "messages"
        ],
        "properties": {
          "model": {
            "type": "string",
            "description": "The [model](#operation/list-models) that will be inferred for chat completion."
          },
          "messages": {
            "type": "array",
            "description": "The message context to use for the chat completion request, separated by system, user, and assistant roles.",
            "items": {
              "$ref": "#/components/schemas/chat-completion-req-message"
            }
          },
          "stream": {
            "type": "boolean",
            "description": "Indicates whether the response should be streamed."
          },
          "max_tokens": {
            "type": "integer",
            "default": 512,
            "description": "The maximum number of tokens to generate for the chat completion."
          },
          "n": {
            "type": "integer",
            "default": 1,
            "description": "The number of chat completion choices to generate for each input message."
          },
          "seed": {
            "type": "integer",
            "description": "If you would like a different response from the same message, changing the seed will change the response. A null value generates a random seed."
          },
          "temperature": {
            "type": "number",
            "format": "float",
            "default": 1,
            "minimum": 0,
            "maximum": 2,
            "description": "A value between 0.0 and 2.0 that controls the randomness of the model's output. When set closer to 1, such as 0.8, the outcome is more unpredictable and creative. Values nearing 0, like 0.2, produce more predictable and less creative results. Setting temperature to zero is equivalent to setting a seed, enabling deterministic testing."
          },
          "top_p": {
            "type": "number",
            "format": "float",
            "default": 1,
            "minimum": 0,
            "maximum": 1,
            "description": "A value between 0.0 and 1.0 that controls the probability of the model generating a particular token. A higher value will result in more diverse outputs, while a lower value will result in more repetitive outputs."
          },
          "frequency_penalty": {
            "type": "number",
            "format": "float",
            "default": 0,
            "minimum": -2,
            "maximum": 2,
            "description": "A value between -2.0 and 2.0 that controls how much the model penalizes generating repetitive responses."
          },
          "presence_penalty": {
            "type": "number",
            "format": "float",
            "default": 0,
            "minimum": -2,
            "maximum": 2,
            "description": "A value between -2.0 and 2.0 that controls how much the model penalizes generating responses that contain certain words or phrases."
          },
          "stop": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of strings that the model will stop generating text if it encounters any of them."
          },
          "logprobs": {
            "type": "boolean",
            "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message."
          },
          "top_logprobs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 20,
            "description": "An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to true if this parameter is used."
          }
        }
      },
      "chat-rag-request-payload": {
        "title": "Chat Completion RAG Request Payload",
        "type": "object",
        "x-tags": [
          "inference",
          "text generation",
          "chat completion",
          "request",
          "RAG",
          "retrieval augmented generation",
          "retrieval-augmented generation"
        ],
        "description": "Chat Completion RAG Request Payload",
        "x-examples": {},
        "required": [
          "collection",
          "model",
          "messages"
        ],
        "properties": {
          "collection": {
            "type": "string",
            "description": "The [vector store collection](#operation/list-vector-stores) to search for relevant context."
          },
          "model": {
            "type": "string",
            "description": "The [model](#operation/list-models) that will be inferred for chat completion."
          },
          "messages": {
            "type": "array",
            "description": "The message context to use for the chat completion request, separated by system, user, and assistant roles.",
            "items": {
              "$ref": "#/components/schemas/chat-completion-req-message"
            }
          },
          "max_tokens": {
            "type": "integer",
            "default": 512,
            "description": "The maximum number of tokens to generate for the chat completion."
          },
          "n": {
            "type": "integer",
            "default": 1,
            "description": "The number of chat completion choices to generate for each input message."
          },
          "seed": {
            "type": "integer",
            "description": "If you would like a different response from the same message, changing the seed will change the response. A null value generates a random seed."
          },
          "temperature": {
            "type": "number",
            "format": "float",
            "default": 1,
            "minimum": 0,
            "maximum": 2,
            "description": "A value between 0.0 and 2.0 that controls the randomness of the model's output. When set closer to 1, such as 0.8, the outcome is more unpredictable and creative. Values nearing 0, like 0.2, produce more predictable and less creative results. Setting temperature to zero is equivalent to setting a seed, enabling deterministic testing."
          },
          "top_p": {
            "type": "number",
            "format": "float",
            "default": 1,
            "minimum": 0,
            "maximum": 1,
            "description": "A value between 0.0 and 1.0 that controls the probability of the model generating a particular token. A higher value will result in more diverse outputs, while a lower value will result in more repetitive outputs."
          },
          "stop": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of strings that the model will stop generating text if it encounters any of them."
          },
          "frequency_penalty": {
            "type": "number",
            "format": "float",
            "default": 0,
            "minimum": -2,
            "maximum": 2,
            "description": "A value between -2.0 and 2.0 that controls how much the model penalizes generating repetitive responses."
          },
          "presence_penalty": {
            "type": "number",
            "format": "float",
            "default": 0,
            "minimum": -2,
            "maximum": 2,
            "description": "A value between -2.0 and 2.0 that controls how much the model penalizes generating responses that contain certain words or phrases."
          },
          "stream": {
            "type": "boolean",
            "description": "Indicates whether the response should be streamed."
          },
          "logprobs": {
            "type": "boolean",
            "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the content of message."
          },
          "top_logprobs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 20,
            "description": "An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to true if this parameter is used."
          }
        }
      },
      "chat-completion-response-payload": {
        "title": "Chat Completion Response Payload",
        "type": "object",
        "x-tags": [
          "inference",
          "text generation",
          "chat completion",
          "response"
        ],
        "description": "Chat Completion Response Payload",
        "x-examples": {},
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the chat completion."
          },
          "created": {
            "type": "integer",
            "description": "The Unix timestamp (in seconds) of when the chat completion was created."
          },
          "model": {
            "type": "string",
            "description": "The model that was inferred for chat completion."
          },
          "choices": {
            "type": "array",
            "description": "The resulting assistant message(s) for the chat completion.",
            "items": {
              "$ref": "#/components/schemas/chat-completion-choice"
            }
          },
          "usage": {
            "$ref": "#/components/schemas/chat-completion-usage"
          }
        }
      },
      "chat-completion-streaming-response-payload": {
        "title": "Chat Completion Streaming Response Payload",
        "type": "object",
        "x-tags": [
          "inference",
          "text generation",
          "chat completion",
          "response",
          "streaming"
        ],
        "description": "Chat Completion Streaming Response Payload",
        "x-examples": {},
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the chat completion."
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always `chat.completion.chunk`."
          },
          "created": {
            "type": "integer",
            "description": "The Unix timestamp (in seconds) of when the chat completion was created."
          },
          "model": {
            "type": "string",
            "description": "The model that was inferred for chat completion."
          },
          "choices": {
            "type": "array",
            "description": "The resulting assistant message(s) for the chat completion.",
            "items": {
              "$ref": "#/components/schemas/chat-completion-streaming-choice"
            }
          }
        }
      },
      "text-to-speech-request-payload": {
        "title": "Text-to-Speech Request Payload",
        "type": "object",
        "x-tags": [
          "inference",
          "speech generation",
          "text-to-speech",
          "request"
        ],
        "description": "Text-to-Speech Request Payload",
        "x-examples": {},
        "required": [
          "model",
          "input",
          "voice"
        ],
        "properties": {
          "model": {
            "type": "string",
            "description": "The [model](#operation/list-audio-models) that will be used to generate text-to-speech audio."
          },
          "input": {
            "type": "string",
            "description": "The text to generate audio for, up to a maximum of 2,000 characters."
          },
          "voice": {
            "type": "string",
            "description": "The voice that will be used in the generated audio."
          }
        }
      },
      "list-vector-stores-response-payload": {
        "title": "List Vector Stores Response Payload",
        "type": "object",
        "x-tags": [
          "inference",
          "embeddings",
          "vectors",
          "vector store",
          "collections",
          "response"
        ],
        "description": "List Vector Stores Response Payload",
        "x-examples": {},
        "properties": {
          "collections": {
            "type": "array",
            "description": "A list of vector store collections.",
            "items": {
              "$ref": "#/components/schemas/vector-store-collection"
            }
          }
        }
      },
      "create-vector-store-request-payload": {
        "title": "Create Vector Store Request Payload",
        "type": "object",
        "x-tags": [
          "inference",
          "embeddings",
          "vectors",
          "vector store",
          "collection",
          "request"
        ],
        "description": "Create Vector Store Request Payload",
        "x-examples": {},
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the vector store collection. This is also used to auto-generate a unique ID for the record."
          }
        }
      },
      "update-vector-store-request-payload": {
        "title": "Update Vector Store Request Payload",
        "type": "object",
        "x-tags": [
          "inference",
          "embeddings",
          "vectors",
          "vector store",
          "collection",
          "request"
        ],
        "description": "Update Vector Store Request Payload",
        "x-examples": {},
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the vector store collection. Note&colon; the previously generated unique ID will remain the same."
          }
        }
      },
      "get-vector-store-response-payload": {
        "title": "Vector Store Response Payload",
        "type": "object",
        "x-tags": [
          "inference",
          "embeddings",
          "vectors",
          "vector store",
          "collection",
          "response"
        ],
        "description": "Vector Store Response Payload",
        "x-examples": {},
        "properties": {
          "collection": {
            "$ref": "#/components/schemas/vector-store-collection"
          }
        }
      },
      "vector-store-collection": {
        "title": "Vector Store Collection",
        "type": "object",
        "x-tags": [
          "inference",
          "embeddings",
          "vectors",
          "vector store",
          "collection"
        ],
        "description": "An object representing a vector store collection containing embeddings records.",
        "x-examples": {},
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the vector store collection."
          },
          "name": {
            "type": "string",
            "description": "The name of the vector store collection."
          }
        }
      },
      "search-vector-store-request-payload": {
        "title": "Search Vector Store Request Payload",
        "type": "object",
        "x-tags": [
          "inference",
          "embeddings",
          "vectors",
          "vector store",
          "collection",
          "search",
          "request"
        ],
        "description": "Search Vector Store Request Payload",
        "x-examples": {},
        "required": [
          "input"
        ],
        "properties": {
          "input": {
            "type": "string",
            "description": "The text query to search against the embeddings items in the vector store collection."
          }
        }
      },
      "search-vector-store-response-payload": {
        "title": "Search Vector Store Response Payload",
        "type": "object",
        "x-tags": [
          "inference",
          "embeddings",
          "vectors",
          "vector store",
          "collections",
          "search",
          "response"
        ],
        "description": "Search Vector Store Response Payload",
        "x-examples": {},
        "properties": {
          "results": {
            "type": "array",
            "description": "A list of collection items that best match the embeddings search query, sorted by most relevant first.",
            "items": {
              "$ref": "#/components/schemas/vector-store-search-result"
            }
          },
          "usage": {
            "$ref": "#/components/schemas/embeddings-usage"
          }
        }
      },
      "vector-store-search-result": {
        "title": "Vector Store Collection",
        "type": "object",
        "x-tags": [
          "inference",
          "embeddings",
          "vectors",
          "vector store",
          "collections",
          "search"
        ],
        "description": "An object representing a collection item search result.",
        "x-examples": {},
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the vector store collection item."
          },
          "created": {
            "type": "string",
            "description": "The UTC creation timestamp of the collection item in ISO 8601 format."
          },
          "content": {
            "type": "string",
            "description": "The readable content text of the vector store collection item."
          }
        }
      },
      "list-vector-store-items-response-payload": {
        "title": "List Vector Store Items Response Payload",
        "type": "object",
        "x-tags": [
          "inference",
          "embeddings",
          "vectors",
          "vector store",
          "collections",
          "items",
          "records",
          "response"
        ],
        "description": "List Vector Store Items Response Payload",
        "x-examples": {},
        "properties": {
          "items": {
            "type": "array",
            "description": "A list of vector store collection items.",
            "items": {
              "$ref": "#/components/schemas/vector-store-item"
            }
          }
        }
      },
      "add-vector-store-item-request-payload": {
        "title": "Add Vector Store Item Request Payload",
        "type": "object",
        "x-tags": [
          "inference",
          "embeddings",
          "vectors",
          "vector store",
          "collections",
          "items",
          "request"
        ],
        "description": "Add Vector Store Item Request Payload",
        "x-examples": {},
        "required": [
          "content"
        ],
        "properties": {
          "content": {
            "type": "string",
            "description": "The text to be converted into embeddings and stored in the vector store collection."
          },
          "description": {
            "type": "string",
            "description": "A description of the contents in this collection item record. If omitted, this value will default to a shortened version of the text stored in the collection."
          }
        }
      },
      "add-vector-store-item-response-payload": {
        "title": "Add Vector Store Item Response Payload",
        "type": "object",
        "x-tags": [
          "inference",
          "embeddings",
          "vectors",
          "vector store",
          "collections",
          "items",
          "response"
        ],
        "description": "Add Vector Store Item Response Payload",
        "x-examples": {},
        "properties": {
          "item": {
            "$ref": "#/components/schemas/vector-store-item-full"
          },
          "usage": {
            "$ref": "#/components/schemas/embeddings-usage"
          }
        }
      },
      "update-vector-store-item-request-payload": {
        "title": "Update Vector Store Item Request Payload",
        "type": "object",
        "x-tags": [
          "inference",
          "embeddings",
          "vectors",
          "vector store",
          "collections",
          "items",
          "request"
        ],
        "description": "Update Vector Store Item Request Payload",
        "x-examples": {},
        "required": [
          "content"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "A description of the contents in this collection item record."
          }
        }
      },
      "get-vector-store-item-response-payload": {
        "title": "Get Vector Store Item Response Payload",
        "type": "object",
        "x-tags": [
          "inference",
          "embeddings",
          "vectors",
          "vector store",
          "collection",
          "item",
          "response"
        ],
        "description": "Get Vector Store Item Response Payload",
        "x-examples": {},
        "properties": {
          "item": {
            "$ref": "#/components/schemas/vector-store-item-full"
          }
        }
      },
      "vector-store-item": {
        "title": "Vector Store Collection Item List",
        "type": "object",
        "x-tags": [
          "inference",
          "embeddings",
          "vectors",
          "vector store",
          "collection",
          "items",
          "records"
        ],
        "description": "An object representing an embeddings record within a vector store collection item list.",
        "x-examples": {},
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the vector store collection item."
          },
          "created": {
            "type": "string",
            "description": "The UTC creation timestamp of the collection item in ISO 8601 format."
          },
          "description": {
            "type": "string",
            "description": "The short description of the content stored as embeddings for this record."
          }
        }
      },
      "vector-store-item-full": {
        "title": "Vector Store Collection Item",
        "type": "object",
        "x-tags": [
          "inference",
          "embeddings",
          "vectors",
          "vector store",
          "collection",
          "items",
          "records"
        ],
        "description": "An object representing an embeddings record within a vector store collection.",
        "x-examples": {},
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the vector store collection item."
          },
          "created": {
            "type": "string",
            "description": "The UTC creation timestamp of the collection item in ISO 8601 format."
          },
          "description": {
            "type": "string",
            "description": "The short description of the content stored as embeddings for this record."
          },
          "content": {
            "type": "string",
            "description": "The full text of the content stored as embeddings for this record."
          }
        }
      },
      "list-vector-store-files-response-payload": {
        "title": "List Vector Store Files Response Payload",
        "type": "object",
        "x-tags": [
          "inference",
          "embeddings",
          "vectors",
          "vector store",
          "collections",
          "files",
          "records",
          "response"
        ],
        "description": "List Vector Store Files Response Payload",
        "x-examples": {},
        "properties": {
          "files": {
            "type": "array",
            "description": "A list of vector store collection items.",
            "items": {
              "$ref": "#/components/schemas/vector-store-file"
            }
          }
        }
      },
      "add-vector-store-file-response-payload": {
        "title": "Add Vector Store File Response Payload",
        "type": "object",
        "x-tags": [
          "inference",
          "embeddings",
          "vectors",
          "vector store",
          "collections",
          "files",
          "response"
        ],
        "description": "Add Vector Store File Response Payload",
        "x-examples": {},
        "properties": {
          "file": {
            "$ref": "#/components/schemas/vector-store-file"
          }
        }
      },
      "get-vector-store-file-response-payload": {
        "title": "Get Vector Store File Response Payload",
        "type": "object",
        "x-tags": [
          "inference",
          "embeddings",
          "vectors",
          "vector store",
          "collection",
          "file",
          "response"
        ],
        "description": "Get Vector Store File Response Payload",
        "x-examples": {},
        "properties": {
          "file": {
            "$ref": "#/components/schemas/vector-store-file"
          }
        }
      },
      "vector-store-file": {
        "title": "Vector Store Collection File",
        "type": "object",
        "x-tags": [
          "inference",
          "embeddings",
          "vectors",
          "vector store",
          "collection",
          "files",
          "records"
        ],
        "description": "An object representing a file uploaded to a vector store collection.",
        "x-examples": {},
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the vector store collection file."
          },
          "filename": {
            "type": "string",
            "description": "The name and extension of the file added to the vector store collection"
          },
          "status": {
            "type": "string",
            "enum": [
              "enqueued",
              "processing",
              "complete",
              "error"
            ],
            "description": "The current processing status of the vector store collection file."
          },
          "items": {
            "type": "integer",
            "description": "The number of embeddings records representing this file in the vector store collection."
          },
          "tokens": {
            "type": "integer",
            "description": "The number of tokens used while processing the uploaded file."
          }
        }
      },
      "models-response-payload": {
        "title": "List Models Response Payload",
        "type": "object",
        "x-tags": [
          "inference",
          "models",
          "response"
        ],
        "description": "List Models Response Payload",
        "x-examples": {},
        "properties": {
          "object": {
            "type": "string",
            "description": "The type of object represented in the response, which is always `list`."
          },
          "data": {
            "type": "array",
            "description": "A list of publicly-available models for use in inference.",
            "items": {
              "$ref": "#/components/schemas/model"
            }
          }
        }
      },
      "audio-models-response-payload": {
        "title": "List Audio Models Response Payload",
        "type": "object",
        "x-tags": [
          "inference",
          "audio generation",
          "speech",
          "text-to-speech",
          "models",
          "response"
        ],
        "description": "List Audio Models Response Payload",
        "x-examples": {},
        "properties": {
          "speech": {
            "type": "array",
            "description": "A list of models for use in text-to-speech inference.",
            "items": {
              "$ref": "#/components/schemas/text-to-speech-model"
            }
          }
        }
      },
      "audio-voices-response-payload": {
        "title": "List Audio Voices Response Payload",
        "type": "object",
        "x-tags": [
          "inference",
          "audio generation",
          "speech",
          "text-to-speech",
          "voices",
          "response"
        ],
        "description": "List Audio Voices Response Payload",
        "x-examples": {},
        "properties": {
          "voices": {
            "type": "array",
            "description": "A list of voices to use for speech generation.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "chat-completion-usage": {
        "title": "Chat Completion Usage",
        "type": "object",
        "x-tags": [
          "inference",
          "text generation",
          "chat completion",
          "usage"
        ],
        "description": "An object containing usage information for this request.",
        "x-examples": {},
        "properties": {
          "completion_tokens": {
            "type": "integer",
            "description": "Number of tokens in the generated completion."
          },
          "prompt_tokens": {
            "type": "integer",
            "description": "Number of tokens in the prompt. Includes vector search embeddings tokens for RAG requests."
          },
          "total_tokens": {
            "type": "integer",
            "description": "Total number of tokens used in the request (prompt + completion)."
          }
        }
      },
      "embeddings-usage": {
        "title": "Embeddings Usage",
        "type": "object",
        "x-tags": [
          "inference",
          "embeddings",
          "vectors",
          "usage"
        ],
        "description": "An object containing usage information for this embeddings request.",
        "x-examples": {},
        "properties": {
          "prompt_tokens": {
            "type": "integer",
            "description": "Number of tokens in the provided input."
          },
          "total_tokens": {
            "type": "integer",
            "description": "Total number of tokens used in the request."
          }
        }
      },
      "chat-completion-choice": {
        "title": "Chat Completion Choice",
        "type": "object",
        "x-tags": [
          "inference",
          "text generation",
          "chat completion",
          "choice"
        ],
        "description": "Chat Completion Choice",
        "x-examples": {},
        "properties": {
          "index": {
            "type": "integer",
            "description": "The index of the choice in the list of choices."
          },
          "message": {
            "$ref": "#/components/schemas/chat-completion-message"
          },
          "logprobs": {
            "$ref": "#/components/schemas/chat-completion-logprobs"
          },
          "finish_reason": {
            "type": "string",
            "description": "The reason the model stopped generating tokens. This will be 'stop' if the model hit a natural stop point or a provided stop sequence or 'length' if the maximum number of tokens specified in the request was reached."
          }
        }
      },
      "chat-completion-streaming-choice": {
        "title": "Chat Completion Streaming Choice",
        "type": "object",
        "x-tags": [
          "inference",
          "text generation",
          "chat completion",
          "choice",
          "streaming"
        ],
        "description": "Chat Completion Streaming Choice",
        "x-examples": {},
        "properties": {
          "index": {
            "type": "integer",
            "description": "The index of the choice in the list of choices."
          },
          "delta": {
            "$ref": "#/components/schemas/chat-completion-stream-message"
          },
          "logprobs": {
            "$ref": "#/components/schemas/chat-completion-logprobs"
          },
          "finish_reason": {
            "type": "string",
            "description": "The reason the model stopped generating tokens. This will be 'stop' if the model hit a natural stop point or a provided stop sequence or 'length' if the maximum number of tokens specified in the request was reached."
          }
        }
      },
      "chat-completion-req-message": {
        "title": "Chat Completion Request Message",
        "type": "object",
        "x-tags": [
          "inference",
          "text generation",
          "chat completion",
          "message"
        ],
        "description": "An object containing the role and content for a chat completion request message.",
        "x-examples": {},
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "system",
              "assistant",
              "user"
            ],
            "description": "The role of the author of this message."
          },
          "content": {
            "type": "string",
            "description": "The contents of the message."
          }
        }
      },
      "chat-completion-message": {
        "title": "Chat Completion Message",
        "type": "object",
        "x-tags": [
          "inference",
          "text generation",
          "chat completion",
          "message"
        ],
        "description": "An object containing the role and content for a chat completion message.",
        "x-examples": {},
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "system",
              "assistant",
              "user"
            ],
            "description": "The role of the author of this message."
          },
          "content": {
            "type": "string",
            "description": "The contents of the message."
          },
          "tool_calls": {
            "type": "array",
            "description": "The tool calls generated by the model, such as function calls.",
            "items": {
              "$ref": "#/components/schemas/message-tool-calls"
            }
          }
        }
      },
      "chat-completion-stream-message": {
        "title": "Chat Completion Stream Message",
        "type": "object",
        "x-tags": [
          "inference",
          "text generation",
          "chat completion",
          "message"
        ],
        "description": "An object containing the role and content for a chat completion stream message.",
        "x-examples": {},
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "system",
              "assistant",
              "user"
            ],
            "description": "The role of the author of this message."
          },
          "content": {
            "type": "string",
            "description": "The contents of the message."
          }
        }
      },
      "chat-completion-logprobs": {
        "title": "Chat Completion Logprobs",
        "type": "object",
        "x-tags": [
          "inference",
          "text generation",
          "chat completion",
          "logprobs"
        ],
        "description": "An object containing the log probability information for a chat completion choice.",
        "x-examples": {},
        "properties": {
          "content": {
            "type": "array",
            "description": "A list of message content tokens with log probability information.",
            "items": {
              "$ref": "#/components/schemas/logprobs-message-content-tokens"
            }
          }
        }
      },
      "logprobs-message-content-tokens": {
        "title": "Chat Completion Logprobs Message Content Tokens",
        "type": "object",
        "x-tags": [
          "inference",
          "text generation",
          "chat completion",
          "logprobs"
        ],
        "description": "An object containing message content tokens for a chat completion choice log probability information.",
        "x-examples": {},
        "properties": {
          "token": {
            "type": "string",
            "description": "The text content of the token."
          },
          "logprob": {
            "type": "number",
            "format": "float",
            "description": "The log probability of the token."
          },
          "bytes": {
            "type": "array",
            "description": "A list of integers representing the UTF-8 bytes representation of the token.",
            "items": {
              "type": "integer"
            }
          },
          "top_logprobs": {
            "type": "array",
            "description": "List of the most likely tokens and their log probability, at this token position.",
            "items": {
              "$ref": "#/components/schemas/logprobs-message-content-token"
            }
          }
        }
      },
      "logprobs-message-content-token": {
        "title": "Chat Completion Logprobs Message Content Token",
        "type": "object",
        "x-tags": [
          "inference",
          "text generation",
          "chat completion",
          "logprobs"
        ],
        "description": "An object containing a message content token for a chat completion choice log probability information.",
        "x-examples": {},
        "properties": {
          "token": {
            "type": "string",
            "description": "The text content of the token."
          },
          "logprob": {
            "type": "number",
            "format": "float",
            "description": "The log probability of the token."
          },
          "bytes": {
            "type": "array",
            "description": "A list of integers representing the UTF-8 bytes representation of the token.",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "message-tool-calls": {
        "title": "Chat Completion Message Tool Calls",
        "type": "object",
        "x-tags": [
          "inference",
          "text generation",
          "chat completion",
          "tools",
          "functions"
        ],
        "description": "An object containing the tool calls generated by the model for a chat completion choice.",
        "x-examples": {},
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the tool call."
          },
          "type": {
            "type": "string",
            "description": "The type of the tool. Currently, only `function` is supported."
          },
          "function": {
            "$ref": "#/components/schemas/tool-call-function"
          }
        }
      },
      "tool-call-function": {
        "title": "Chat Completion Tool Call Function",
        "type": "object",
        "x-tags": [
          "inference",
          "text generation",
          "chat completion",
          "tools",
          "functions"
        ],
        "description": "An object containing the the function that the model called for a chat completion choice.",
        "x-examples": {},
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the function to call."
          },
          "arguments": {
            "type": "string",
            "description": "The arguments to call the function with, as generated by the model in JSON format."
          }
        }
      },
      "model": {
        "title": "Model",
        "type": "object",
        "x-tags": [
          "inference",
          "model"
        ],
        "description": "Model",
        "x-examples": {},
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique model identifier that can be used in inference API endpoints."
          },
          "object": {
            "type": "string",
            "description": "The type of object represented in the response, which is always `model`."
          },
          "created": {
            "type": "string",
            "description": "The Unix timestamp of when the model was added to the inference API."
          },
          "owned_by": {
            "type": "string",
            "description": "The organization that owns the model."
          },
          "features": {
            "type": "array",
            "description": "A list of features supported by the model.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "text-to-speech-model": {
        "title": "Text-to-Speech Model",
        "type": "object",
        "x-tags": [
          "inference",
          "speech generation",
          "text-to-speech",
          "model"
        ],
        "description": "Text-to-Speech Model",
        "x-examples": {},
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of model."
          },
          "model": {
            "type": "string",
            "description": "The name of the model."
          },
          "display_name": {
            "type": "string",
            "description": "The full display name of the model."
          },
          "price": {
            "type": "number",
            "format": "float",
            "description": "The price per 1000 input characters for using the model."
          },
          "vram": {
            "type": "integer",
            "description": "The amount of VRAM in bytes required to use this model."
          }
        }
      },
      "usage-response-payload": {
        "title": "Get Usage Response Payload",
        "type": "object",
        "x-tags": [
          "token",
          "usage",
          "response"
        ],
        "description": "Get Usage Response Payload",
        "x-examples": {},
        "properties": {
          "current_month": {
            "$ref": "#/components/schemas/usage-object"
          },
          "previous_month": {
            "$ref": "#/components/schemas/usage-object"
          }
        }
      },
      "usage-object": {
        "title": "Inference Usage",
        "type": "object",
        "x-tags": [
          "inference",
          "usage",
          "tokens",
          "tts",
          "speech",
          "text-to-speech"
        ],
        "description": "Object containing usage values for the given month.",
        "x-examples": {},
        "properties": {
          "chat": {
            "type": "integer",
            "description": "The total number of chat completion tokens used in this monthly period."
          },
          "tts": {
            "type": "integer",
            "description": "The total number of text-to-speech input characters used this period with the standard HD model."
          },
          "tts_sm": {
            "type": "integer",
            "description": "The total number of text-to-speech input characters used this period with the basic model."
          }
        }
      },
      "cluster-status-response-payload": {
        "title": "Health Check Get Cluster Status Response Payload",
        "type": "object",
        "x-tags": [
          "health",
          "health check",
          "status",
          "cluster status",
          "response"
        ],
        "description": "Health Check Get Cluster Status Response Payload",
        "x-examples": {},
        "properties": {
          "status": {
            "type": "string",
            "description": "The current status of the inference cluster."
          }
        }
      },
      "cluster-status-response-error-payload": {
        "title": "Health Check Get Cluster Status Error Response Payload",
        "type": "object",
        "x-tags": [
          "health",
          "health check",
          "status",
          "cluster status",
          "response",
          "error"
        ],
        "description": "Health Check Get Cluster Status Error Response Payload",
        "x-examples": {},
        "properties": {
          "status": {
            "type": "string",
            "description": "The current status of the inference cluster."
          },
          "message": {
            "type": "string",
            "description": "A more detailed error message regarding why the health check failed."
          }
        }
      },
      "request-log-item": {
        "title": "Request Log Item",
        "type": "object",
        "x-tags": [
          "query",
          "request",
          "log"
        ],
        "description": "Request Log Item",
        "x-examples": {},
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The UTC timestamp of the logged request in ISO 8601 format."
          },
          "method": {
            "type": "string",
            "description": "The method used for the logged request call, e.g. `GET`, `POST`, etc."
          },
          "endpoint": {
            "type": "string",
            "description": "The API endpoint called in the logged request."
          },
          "request_headers": {
            "type": "string",
            "description": "A string containing the logged request's request headers in JSON format, with private information such as the API key redacted."
          },
          "request_body": {
            "type": "string",
            "description": "A string containing the logged request's body in JSON format, or an empty string if no request body was sent."
          },
          "response_body": {
            "type": "string",
            "description": "A string containing the logged request's response body in JSON format, or an empty string if no response body was returned. Media content responses will return a placeholder message."
          },
          "response_code": {
            "type": "integer",
            "description": "The HTTP response status code returned when the logged request was made."
          }
        }
      },
      "query-requests-payload": {
        "title": "Query Requests Payload",
        "type": "object",
        "x-tags": [
          "requests",
          "api",
          "logs",
          "responses"
        ],
        "description": "Query Requests Payload",
        "x-examples": {},
        "required": [
          "period"
        ],
        "properties": {
          "period": {
            "type": "integer",
            "enum": [
              15,
              30,
              45,
              60
            ],
            "description": "The number of minutes to search back from the chosen timestamp, up to the previous hour."
          },
          "timestamp": {
            "type": "string",
            "description": "The UTC timestamp to search request logs from in ISO 8601 format, e.g. `2024-01-01T12:00:00Z`. Omit to default to the current UTC time."
          },
          "endpoint": {
            "type": "string",
            "description": "The name of the endpoint to narrow your request search."
          }
        }
      },
      "query-requests-response-payload": {
        "title": "Query Requests Response Payload",
        "type": "object",
        "x-tags": [
          "requests",
          "api",
          "logs",
          "responses"
        ],
        "description": "Query Requests Response Payload",
        "x-examples": {},
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/request-log-item"
            }
          }
        }
      }
    },
    "parameters": {
      "chat-completion-id": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "The ID of the chat completion job.",
        "schema": {
          "type": "string"
        }
      },
      "vector-store-id": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "The ID of the vector store collection.",
        "schema": {
          "type": "string"
        }
      },
      "vector-store-item-id": {
        "name": "itemid",
        "in": "path",
        "required": true,
        "description": "The ID of the vector store collection item.",
        "schema": {
          "type": "string"
        }
      },
      "vector-store-file-id": {
        "name": "fileid",
        "in": "path",
        "required": true,
        "description": "The ID of the vector store collection file.",
        "schema": {
          "type": "string"
        }
      },
      "model-id": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "The ID of the inference model.",
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "API Key": {
        "type": "http",
        "scheme": "bearer",
        "in": "header",
        "description": "The Vultr Inference API v1 uses API keys for authentication. You can manage your API keys in the Vultr customer portal. Please do not share API keys publicly, or embed them in client-side code.\n\nTo authenticate a request, send your API Key as a bearer token in the request header.\n\n### Authentication Example\n\n    curl \"https://api.vultrinference.com/v1/chat/models\" \\\n      -X GET \\\n      -H \"Authorization: Bearer ${VULTR_API_KEY}\"\n\nUnauthenticated API requests will fail. All requests must use HTTPS encryption for security, and calls made with HTTP will fail."
      }
    },
    "responses": {
      "401": {
        "description": "Unauthorized"
      },
      "403": {
        "description": "Forbidden"
      },
      "404": {
        "description": "Not Found"
      },
      "422": {
        "description": "Bad Request"
      }
    }
  }
}